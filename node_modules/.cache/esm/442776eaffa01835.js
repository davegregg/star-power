let User;_ffa‍.x([["connectToMongo",()=>connectToMongo],["handleStar",()=>handleStar],["checkIfUser",()=>checkIfUser],["userHasEnoughStars",()=>userHasEnoughStars],["handleTransaction",()=>handleTransaction]]);_ffa‍.w("./models/User",[["User",["User"],function(v){User=v}]]);const mongoose = require("mongoose");

let connectedToDB = false;

       function connectToMongo() {
	if (!connectedToDB) {
		mongoose.connect(process.env.MONGO_URI, {
			useNewUrlParser: true,
			useUnifiedTopology: true,
		});
		const db = mongoose.connection;
		db.on("error", _ffa‍.g.console.error.bind(_ffa‍.g.console, "connection error:"));
		db.once("open", function () {
			// we're connected!
			console.log("Connected to MongoDB");
		});
		connectedToDB = true;
	} else {
		console.log("Already connected");
	}
}

       function handleStar() {}

       function checkIfUser(username) {
	User.findOne({ username: username }).exec(function (err, user) {
		if (user) {
			return;
		} else {
			const newUser = new User({
				username: username,
				stars: 2,
				amountGiven: 0,
			});

			newUser.save((err) => {
				if (err) {
					_ffa‍.g.console.log(err);
				}
				console.log("User Created");
			});
		}
	});
}

       async function userHasEnoughStars(username, starsSent) {
	let foundUser = await User.findOne({ username: username });
	return !(foundUser.stars < starsSent);
}

function takeStars(username, amount) {
	User.findOne({ username: username }, (err, user) => {
		if (!user) {
			console.log("User doesn't exist. How'd you do this?");
		}
		let previousBalance = user.stars;

		user.stars.set(previousBalance - stars);
		user.save();
		console.log("Balance updated");
	});
}

       function handleTransaction(sender, receiver, starsSent) {
	for (let user in receiver) {
		checkIfUser(user);
	}
	takeStars(sender, starsSent);
}
